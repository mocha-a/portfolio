[
  {
    "title": "안지현 | 프론트엔드 개발자 포트폴리오",
    "subtitle": "기술 세계를 탐험하는 신입 프론트엔드 개발자의 첫 렌더링, React로 만든 SPA 포트폴리오",
    "color" : "#DC78A1",
    "icon": "/logo192.png",
    "thumbnail": "/imgs/portfolio-thumbnail.png",
    "description": "프로젝트 목록을 JSON 형태로 관리하여 효율적으로 콘텐츠를 구성했으며, \nSwiper.js를 활용한 슬라이드 UI, 반응형 웹, 스크롤 애니메이션 등을 구현하여 사용자 경험을 향상시켰습니다.",
    "period": "2025.06.17 - 2025.06.25",
    "team": 1,
    "links": {
      "url": "https://anji-frontend-portfolio.vercel.app",
      "github": "https://github.com/mocha-a/portfolio"
    },
    "features": [
      "프로젝트 필터링 (개인 / 팀)",
      "JSON 데이터 기반 콘텐츠 렌더링",
      "Swiper.js로 기술 스택 슬라이드 구현",
      "상세 프로젝트 팝업",
      "연락처 툴팁 & 클립보드 복사 기능",
      "모바일·태블릿 반응형 지원"
    ],
    "stack": {
      "frontEnd": [
        "React",
        "JavaScript",
        "JSON",
        "SCSS",
        "MUI",
        "Swiper.js"
      ],
      "backEnd": []
    },
    "myRoles": [
      {
        "title": "프로젝트 필터링 (개인 / 팀)",
        "details": [
          "사용자가 탭을 클릭해 개인 프로젝트와 팀 프로젝트를 쉽게 구분하여 볼 수 있도록 필터링 기능 구현",
          "JSON 데이터를 기반으로 각 분류별 프로젝트를 동적 렌더링"
        ]
      },
      {
        "title": "슬라이드 (Swiper.js)",
        "details": [
          "Swiper.js 라이브러리를 활용해 기술 스택을 카드 형태의 슬라이드로 구현"
        ]
      },
      {
        "title": "상세 프로젝트 팝업 (역할 / 기술 / 트러블슈팅 포함)",
        "details": [
          "프로젝트 카드 클릭 시 상세 정보 팝업",
          "담당 역할, 사용 기술, 문제 해결 과정 표시"
        ]
      },
      {
        "title": "연락처 툴팁 & 클립보드 복사 기능",
        "details": [
          "mui 라이브러리를 활용하여 연락처 툴팁 표시 및 클립보드 자동 복사로 사용자 편의성 향상"
        ]
      },
      {
        "title": "반응형 웹",
        "details": [
          "다양한 화면 크기와 기기 환경에 맞게 레이아웃과 UI 요소들이 유연하게 조정되어 쾌적한 사용자 경험 제공"
        ]
      }
    ],
    "troubleshooting": [
      {
        "issue": "모바일 환경에서 팝업이 화면 대부분을 차지해 바깥 영역 클릭으로 닫기가 어려운 이슈",
        "cause": "팝업 바깥 여백이 좁아 `mousedown` 이벤트가 바깥 영역에서 잘 발생하지 않음",
        "solutions": [ "팝업 상단에 명확한 닫기 버튼 추가" ]
      },
      {
        "issue": "팝업이 열렸을 때, 팝업이 아닌 배경 페이지가 스크롤되는 이슈",
        "cause": "팝업 컴포넌트가 화면을 덮고 있지만, body 자체의 스크롤을 막지 않아 뒤 배경이 계속 움직임",
        "solutions": [
          "팝업이 열릴 때 `document.body.style.overflow = \"hidden\"`으로 설정",
          "팝업이 닫힐 때는 \"auto\"로 복구하여 정상적인 스크롤 동작 유지",
          "useEffect(() => {\n  document.body.style.overflow = item ? \"hidden\" : \"auto\";\n  return () => {\n    document.body.style.overflow = \"auto\";\n  };\n}, [item]);"
        ]
      }
    ]
  },
  {
    "title": "흔적",
    "subtitle": "읽고 느낀 모든 순간을 담는 독서 기록 앱",
    "color" : "#B6BB79",
    "icon": "/imgs/heunjeok-logo.svg",
    "thumbnail": "/imgs/heunjeok-thumbnail.png",
    "description": "비회원도 자유롭게 사용 가능하며, 비밀번호 기반으로 리뷰를 안전하게 수정·삭제할 수 있습니다. Flutter와 PHP를 사용해 7일간 2인이 개발했으며,\n슬라이드형 UI, 별점 기능, 검색 등 간단하지만 직관적인 기능을 제공합니다.\n알라딘 Open API를 연동하여 추천 도서와 베스트셀러 정보를 제공하며,\n책에 대한 감상을 남기고 싶었던 사용자들을 위한 작고 소중한 기록 공간입니다.",
    "period": "2025.06.10 - 2025.06.16",
    "team": 2,
    "links": {
      "url": "https://heunjeok.vercel.app",
      "github": "https://github.com/mocha-a/heunjeok"
    },
    "features": [
      "SPA 기반",
      "모바일·태블릿 반응형 지원",
      "자체 회원가입 및 로그인",
      "카테고리·검색으로 상품 탐색",
      "장바구니·위시리스트",
      "주문 내역 확인"
    ],
    "stack": {
      "frontEnd": [
        "Flutter",
        "Dart",
        "GetX",
        "HTTP"
      ],
      "backEnd": [
        "PHP",
        "MySQL",
        "xampp"
      ]
    },
    "myRoles": [
      {
        "title": "홈 화면 주요 기능",
        "details": [
          "추천 도서/베스트셀러 슬라이드 구현",
          "백엔드에서 알라딘 Open API 호출 후 필요한 정보만 JSON으로 가공해 프론트 전달",
          "프론트에서 슬라이드 UI로 인기 도서 시각 제공"
        ]
      },
      {
        "title": "도서/기록 탭 분리 UI",
        "details": [
          "도서 탭: 알라딘 API 기반 검색 결과 출력, 클릭 시 상세 페이지 이동",
          "기록 탭: 서버 저장 사용자 리뷰를 검색어 기준으로 조회 및 출력"
        ]
      },
      {
        "title": "최근 검색어 저장 및 표시 기능",
        "details": [
          "Hive를 활용해 최대 10개 검색어 로컬 저장, 앱 재실행 시에도 유지",
          "UI 상단에 가로 스크롤로 최근 검색어 노출, 반복 검색 시 편리한 UX 제공"
        ]
      }
    ],
    "troubleshooting": [
      {
        "issue": "Row 안의 자식 위젯들이 부모 위젯 가로 크기보다 커서 화면 오른쪽으로 콘텐츠가 넘침",
        "cause": "Row 위젯이 고정된 공간 내에 자식들을 모두 표시하려고 시도함",
        "solutions": [
          "Row를 SingleChildScrollView(scrollDirection: Axis.horizontal)로 감싸 스크롤 가능하게 처리",
          "mainAxisSize를 MainAxisSize.min으로 설정하여 오버플로우 방지"
        ]
      },
      {
        "issue": "실제로는 리뷰가 1개 밖에 없는데 검색 결과가 비정상적으로 많이 나오는 이슈 발생",
        "cause": "book 테이블에 book_id 중복 데이터 존재, JOIN 시 중복 곱해져 출력됨",
        "solutions": [
          "book 테이블에서 중복된 book_id 데이터 삭제 및 데이터 정리",
          "[insert.php] 쿼리 수정: \n$checkBook = \"SELECT * FROM book WHERE id = '$book_id'\" \n→ $checkBook = \"SELECT * FROM book WHERE book_id = '$book_id'\""
        ]
      }
    ]
  },
  {
    "title": "moonly",
    "subtitle": "Flutter 일정 관리 앱",
    "color" : "#ABA5DC",
    "icon": "/imgs/moonly-logo.svg",
    "thumbnail": "/imgs/moonly-thumbnail.png",
    "description": "Flutter로 만든 일정 관리 앱으로, TableCalendar 위젯을 활용해 직관적인 달력 UI를 제공하며, GetX 상태관리와 Hive 기반 로컬 저장 기능, 4가지 색상 그룹핑으로 효율적인 일정 관리를 지원합니다.",
    "period": "2025.06.04 - 2025.06.10",
    "team": 1,
    "links": {
      "url": "https://anji-moonly.vercel.app",
      "github": "https://github.com/mocha-a/moonly"
    },
    "features": [
      "TableCalendar UI",
      "일정 검색 기능",
      "GetX 상태 관리",
      "Hive 로컬 저장 (오프라인 지원)"
    ],
    "stack": {
      "frontEnd": [
        "Flutter",
        "Dart",
        "Hive",
        "GetX"
      ],
      "backEnd": []
    },
    "myRoles": [
      {
        "title": "GetX 상태 관리 구현",
        "details": [
          "컴포넌트 간 데이터 흐름과 UI 업데이트를 효율적으로 처리하도록 설계 및 개발"
        ]
      },
      {
        "title": "Hive 로컬 저장 및 오프라인 지원",
        "details": [
          "일정 데이터를 로컬에 저장해 네트워크 없이도 데이터 유지 가능하도록 구현"
        ]
      },
      {
        "title": "일정 정렬 및 시간대 구분선 시각화",
        "details": [
          "시작 시간 기준 일정 자동 정렬과 시각적 시간 구분 기능 추가"
        ]
      },
      {
        "title": "4가지 색상 그룹핑으로 일정 분류",
        "details": [
          "일정 유형별 색상 구분 로직 개발로 직관적인 일정 관리 환경 구현"
        ]
      },
      {
        "title": "일정 검색 기능",
        "details": [
          "키워드 기반 필터링 기능 개발로 원하는 일정 빠르게 찾기 지원"
        ]
      }
    ],
    "troubleshooting": [
      {
        "issue": "모바일에서 showModalBottomSheet 사용 시 키보드가 올라오면 입력 필드와 저장 버튼이 가려져 클릭 불가능",
        "cause": "모달 하단이 키보드에 의해 가려지면서 뷰포트가 자동으로 조정되지 않아 입력 필드와 버튼이 화면 밖에 위치",
        "solutions": [
          "isScrollControlled: true 옵션 추가로 모달이 키보드에 맞게 올라가도록 설정",
          "Padding 위젯에 MediaQuery.of(context).viewInsets.bottom 적용해 키보드 높이만큼 여백 확보",
          "Column의 mainAxisSize를 MainAxisSize.min으로 설정해 모달 크기를 내용에 맞게 조절"
        ]
      }
    ]
  },
  {
    "title": "melody",
    "subtitle": "일본 인기 캐릭터 산리오 잡화 모바일 쇼핑몰 웹사이트",
    "color" : "#F5A2D8",
    "icon": "/imgs/melody-logo.svg",
    "thumbnail": "/imgs/melody-thumbnail.png",
    "description": "React를 기반으로 SPA 구조로 제작되었으며, 사용자 친화적인 UI/UX 설계를 통해 언제 어디서나 간편하게 인기 캐릭터 상품을 탐색하고 구매할 수 있습니다.\n직접 구현한 회원가입/로그인 기능, 위시리스트, 장바구니, 주문 내역 확인까지 모바일 환경에 최적화된 쇼핑 경험을 제공합니다.\n또한, 관리자 페이지는 PHP와 MySQL로 구현하여 상품 및 회원 데이터를 효율적으로 관리할 수 있도록 구성했습니다.",
    "period": "2025.05.14 - 2025.05.23",
    "team": 2,
    "links": {
      "url": "https://anji-melody.vercel.app",
      "github": "https://github.com/mocha-a/melody.git"
    },
    "features": [
      "SPA 기반",
      "모바일 환경 최적화",
      "자체 회원가입 및 로그인",
      "카테고리·검색으로 상품 탐색",
      "장바구니·위시리스트",
      "주문 내역 확인"
    ],
    "stack": {
    "frontEnd": [
        "React",
        "JavaScript",
        "Sass",
        "Axios",
        "React Router",
        "Zustand",
        "LocalStorage",
        "카카오 주소 API"
      ],
    "backEnd": [
        "PHP",
        "MySQL",
        "xampp"
      ]
    },
    "myRoles": [
        {
          "title": "위시리스트 관리",
          "details": [
            "로그인 사용자 기준으로 찜한 상품 목록 불러오기 및 표시",
            "찜하기 토글 버튼 구현으로 실시간 추가/삭제 가능",
            "로컬 스토리지와 서버 동기화 처리"
          ]
        },
        {
          "title": "카테고리 내비게이션 바",
          "details": [
            "메인, 중간, 서브 카테고리별 링크 제공",
            "각 카테고리에 맞는 아이콘 및 배너 이미지 동적 렌더링"
          ]
        },
        {
          "title": "배송지 입력 및 관리",
          "details": [
            "다음 우편번호 API 연동하여 주소 자동 검색 및 입력 지원",
            "배송 메모 선택 및 직접 입력 기능 제공"
          ]
        },
        {
          "title": "연관 상품 추천 슬라이더",
          "details": [
            "구매 상품 키워드 기반으로 비슷한 상품 자동 필터링",
            "Swiper 라이브러리 활용한 터치 및 드래그 슬라이더 UI 적용"
          ]
        },
        {
          "title": "주문 결제 입력 폼",
          "details": [
            "주문 상품, 배송지, 결제 수단, 주문 요약 및 결제 동의 기능 구현",
            "사용자 입력 검증 및 API로 주문 정보 전송"
          ]
        },
        {
          "title": "PHP 주문/찜/상품 API 구현",
          "details": [
            "주문 상품, 배송지, 결제 수단 관리 및 결제 동의 기능 구현",
            "사용자 입력 검증 및 API 통신 처리",
            "찜 목록 조회, 추가, 삭제 기능 구현",
            "키워드 기반 상품 필터링 API 개발",
            "주문 내역 조회 및 안전한 삭제 트랜잭션 처리"
          ]
        }
    ],
    "troubleshooting": [
        {
          "issue": "ListPage.jsx에서 URL 파라미터에서 카테고리 이름을 직접 가져와 사용했으나 소카테고리 이름 누락 문제 발생",
          "cause": "카테고리 확장으로 인해 URL 파라미터에 모든 정보가 포함되지 않음",
          "solutions": [
            "버거 메뉴에서 선택한 카테고리 정보를 localStorage에 저장하여 파라미터에 의존하지 않고 안정적으로 카테고리 이름 표시"
          ]
        },
        {
          "issue": "상품 상세 페이지에서 뒤로 가기 시 데이터가 완전히 로드되기 전에 렌더링되어 에러 발생",
          "cause": "데이터 배열이 비어있거나 준비되지 않은 상태에서 렌더링 시도",
          "solutions": [
            "데이터 배열 length 체크 후 데이터 없으면 렌더링하지 않고 로딩 상태 또는 빈 화면 표시 처리"
          ]
        }
    ]
  },
  {
    "title": "떠나봅서",
    "subtitle": "제주 여행 정보 제공 SPA 웹사이트",
    "color" : "#5886BA",
    "icon": "/imgs/jeju-trip-logo.svg",
    "thumbnail": "/imgs/jeju-trip-thumbnail.png",
    "description": "React와 비짓제주, 기상청 오픈 API를 활용하여\n제주 여행자들이 쉽게 정보를 수집하고 즐겁게 여행 계획을 세울 수 있는 웹 서비스입니다.\n또한, 480px(모바일)과 768px(태블릿) 해상도에 최적화된 디자인을 적용하여, 다양한 환경에서도 편리하게 이용할 수 있도록 개발했습니다.",
    "period": "2025.04.02 - 2025.04.23",
    "team": 5,
    "links": {
      "url": "https://anji-jeju-trip.vercel.app",
      "github": "https://github.com/mocha-a/Jeju-trip"
    },
    "features": [
      "SPA 기반",
      "여행 정보 제공",
      "커뮤니티",
      "일정 관리",
      "체크리스트",
      "SNS 로그인",
      "모바일·태블릿 반응형 지원"
    ],
    "stack": {
      "frontEnd": [
        "React",
        "JavaScript",
        "Sass",
        "Axios",
        "React Router",
        "Zustand"
      ],
      "backEnd": [
        "Node.js",
        "Express",
        "MongoDB"
      ]
    },
    "myRoles": [
      {
      "title": "기상청 Open API 연동",
      "details": [
          "단기예보·중기예보 데이터 가공 및 날씨 정보 제공",
          "하늘상태, 강수형태 등의 숫자 데이터를 텍스트·아이콘으로 변환 출력"
        ]
      },
      {
      "title": "여행 일정 관리 기능",
      "details": [
          "일정 추가, 수정, 삭제 기능",
          "react-date-range로 날짜 범위 선택",
          "드래그 앤 드롭으로 일정 순서 변경 (@hello-pangea/dnd 사용)",
          "zustand를 활용한 전역 상태 관리"
        ]
      },
      {
      "title": "추천 일정 기능",
      "details": [
          "여행 기간에 맞춰 추천 일정 자동 제공",
          "scrollTo를 활용한 날짜 이동, 추천 일정 가져오기 기능"
        ]
      },
      {
      "title": "장소 정보 연동 (비짓제주 API)",
      "details": [
          "지역/카테고리별 장소 필터링",
          "좋아요 기능과 연동하여 장소 추가"
        ]
      },
      {
      "title": "날씨 정보 시각화",
      "details": [
          "Home, PlannerDetail 페이지에서 날씨 정보 아이콘과 함께 출력",
          "map()을 활용해 기간별 날씨 UI 구성"
        ]
      }
    ],
    "troubleshooting": [
      {
      "issue": "<AnimatePresence>의 exit 애니메이션이 동작하지 않는 이슈",
      "cause": "조건부 렌더링 내부에서 AnimatePresence를 사용했기 때문에 상태 변경 시 컴포넌트가 즉시 사라짐",
      "solutions": [
          "AnimatePresence를 조건문 바깥으로 이동하여 exit 애니메이션이 실행될 수 있도록 구조 변경"
        ]
      },
      {
      "issue": "Day 버튼 클릭 시 스크롤이 항상 최하단으로 이동되는 이슈",
      "cause": "useRef를 단일 요소에 사용해서 여러 날짜 중 어떤 버튼을 눌러도 마지막 요소로만 스크롤됨",
      "solutions": [
          "ref를 배열로 선언하고 날짜별로 인덱스에 맞는 DOM 참조",
          "scrollIntoView 대신 window.scrollTo({ top: offsetTop - 헤더높이 })로 부드럽게 이동 처리"
        ]
      }
    ]
  },
  {
    "title": "Jiflix",
    "subtitle": "TMDB API를 활용한 React 영화 정보 웹 앱",
    "color" : "#e50914",
    "icon": "/imgs/jiflix-logo.svg",
    "thumbnail": "/imgs/jiflix-thumbnail.png",
    "description": "TMDB Open API를 활용해 실제 영화 데이터를 연동하고, 사용자가 원하는 영화를 검색해 찾을 수 있도록 구현했습니다.\n리스트에서 마우스를 올리는 것만으로 별점, 장르 등 주요 정보를 빠르게 확인할 수 있으며,\n유사 콘텐츠까지 자연스럽게 탐색할 수 있도록 사용자 경험을 고민하며 완성한, 저의 첫번째 React 프로젝트입니다.",
    "period": "2025.03.17 - 2025.03.21\n* 추가 작업 : \n2025.06.30 - 2025.07.02",
    "team": 1,
    "links": {
      "url": "https://jiflix.vercel.app",
      "github": "https://github.com/mocha-a/Jiflix"
    },
    "features": [
      "TV, movie - popular(인기), top_rated(베스트) 조회",
      "키워드로 검색",
      "유사 콘텐츠 추천"
    ],
    "stack": {
      "frontEnd": [
        "React",
        "JavaScript",
        "Sass",
        "TMDB API",
        "Axios",
        "React Router"
      ],
      "backEnd": []
    },
    "myRoles": [
      {
        "title": "TMDB API 연동",
        "details": [
          "TMDB API를 활용하여 인기 및 평점 높은 영화/TV 데이터를 카테고리별로 조회 및 표시", 
          "Axios를 사용해 비동기 데이터 요청 및 응답 처리"
        ]
      },
      {
        "title": "검색 및 유사 콘텐츠 구현",
        "details": [
          "키워드 기반 콘텐츠 검색 기능 구현",
          "TMDB API의 similar 엔드포인트를 활용한 유사 콘텐츠 자동 추천 기능 구현"
        ]
      },
      {
        "title": "라우팅 및 페이지 구성",
        "details": [ 
          "React Router를 활용한 메인, 검색, 상세 페이지 SPA 라우팅 구현",
          "URL 경로 기반으로 영화(movie)와 TV(tv) 콘텐츠 타입 구분 처리"
        ]
      }
    ],
    "troubleshooting": [
      {
        "issue": "/movie에서 /tv로 이동해도 useEffect가 실행되지 않음",
        "cause": "컴포넌트가 동일하기 때문에 React에서 리렌더링되지 않고 useEffect가 처음 한 번만 실행됨",
        "solutions": [
          "useLocation의 pathname을 useEffect 의존성 배열에 추가해 경로 변경 시 데이터를 다시 불러오도록 수정"
        ]
      },
      {
        "issue": "/movie 경로에서 인기(popular)와 평점(top_rated) 데이터를 동시에 보여줘야 함",
        "cause": "/movie 하위 페이지가 아닌 루트 경로에서는 인기/평점 둘 다 보여줘야 하는데, 데이터 통합 시 각 아이템이 어떤 타입인지 구분이 어려움",
        "solutions": [
          "데이터 초기값을 빈 배열이 아닌 오브젝트 형태({ popular: [], top_rated: [] })로 설정하여 타입별로 구분 가능하게 처리"
        ]
      },
      {
        "issue": "상세 페이지 경로가 겹쳐서 컴포넌트가 재랜더링되지 않음",
        "cause": "/movie/{id} 구조가 /tv/{id}와 동일한 컴포넌트를 사용하고 있어 상세 페이지 데이터가 바뀌지 않는 문제 발생",
        "solutions": [
          "상세 페이지 경로를 /movie/popular/{id}, /tv/top_rated/{id}처럼 보다 구체적으로 지정하여 경로 변화가 생기도록 수정"
        ]
      }
    ]
  },
  {
    "title": "SANGREEN",
    "subtitle": "웹 리뉴얼 프로젝트",
    "color" : "#999F54",
    "icon": "/imgs/sangreen-logo.svg",
    "thumbnail": "/imgs/sangreen-thumbnail.png",
    "description": "사이트 배포 후 관리가 필요한 기존 사이트를 선정하여,\n고객 확보를 위한 트렌디한 디자인과 사용자를 고려한 편리한 기능을 중심으로 한 리뉴얼 프로젝트입니다.",
    "period": "2025.01.23 - 2025.02.24",
    "team": 4,
    "links": {
      "url": "https://mocha-a.github.io/sangreen",
      "github": "https://github.com/mocha-a/sangreen"
    },
    "features": [
      "예약 시스템",
      "객실 정보 제공",
      "고객 편의 기능"
    ],
    "stack": {
    "frontEnd": [
      "HTML5",
      "JavaScript",
      "Sass"
    ],
    "backEnd": []
    },
    "myRoles": [
      {
        "title": "예약하기 바",
        "details": [
            "FullCalendar 활용",
            "예약 바 클릭 시 입/퇴실 날짜 및 인원 수 선택 팝업 표시",
            "성인/어린이 수 증감 버튼 구현 (min/max 조건에 따른 활성화 제어)",
            "선택된 예약 정보(localStorage) 저장: 호실, 날짜, 인원 등"
        ]
      },
      {
        "title": "예약 정보 입력",
        "details": [
            "예약 바에서 저장된 데이터를 불러와 사용자 확인 및 입력 단계 구현",
            "예약 완료 시 localStorage에 사용자 정보 추가 저장"
        ]
      },
      {
        "title": "예약 확인 및 취소",
        "details": [
            "사용자 입력값(이름, 전화번호)과 localStorage 값이 일치할 경우 해당 예약 정보 출력 및 예약 취소 버튼 활성화",
            "예약 취소 시 해당 데이터 localStorage에서 삭제"
        ]
      }
    ],
    "troubleshooting": [
        {
          "issue": "이름, 전화번호가 동일한 예약정보가 2개 이상일 때, 하나의 예약정보만 보여지는 이슈 발생",
          "cause": "기존 코드에서는 객체의 index값을 반복하는 filter와 break로 하나의 값만 찾고 반복문에서 탈출",
          "solutions": [
              "forEach와 push를 사용하여 조건에 맞는 모든 예약 정보를 배열에 수집",
              "createElement()를 사용해 다수의 예약 내역을 동적으로 생성하여 출력"
          ]
        },
        {
          "issue": "예약 정보가 2개 이상 확인될 때 원하는 예약을 삭제하지 못하는 이슈 발생",
          "cause": "기존에는 여러 예약 중 어떤 항목을 선택했는지 구분 없이 삭제 로직이 처리됨",
          "solutions": [
              "각 예약 정보마다 <input type=\"checkbox\">를 생성하여 개별 선택 가능하도록 구현",
              "checked 상태인 예약 정보에 대해 for~in문과 filter를 사용해 조건(호실, 입실 날짜, 퇴실 날짜)을 기준으로 필터링",
              "필터링된 데이터를 다시 Local Storage에 저장"
          ]
        }
    ]
  }
]